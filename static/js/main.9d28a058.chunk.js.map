{"version":3,"sources":["components/Nav/index.js","components/Jumbotron/index.js","components/Grid/Col.js","components/Grid/Container.js","components/Grid/Row.js","utils/images.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","className","message","score","topScore","Jumbotron","Col","size","children","split","map","join","Container","fluid","Row","images","id","src","process","imageLoader","App","state","clickedArr","componentDidMount","setState","cb","shuffleImages","temp","i","length","j","Math","floor","random","handleClick","console","log","includes","concat","this","cat","key","alt","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.9d28a058.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Nav(props) {\n  return (\n    <nav className=\"navbar navbar-expand-lg bg-primary fixed-top text\">\n      <span className=\"navbar-brand text\">\n        Kitty-Kat Memory Game\n      </span>\n      <span className=\"navbar-text mx-auto\">\n       {props.message}\n     </span>\n     \n      <span className=\"navbar-text ml-auto\">\n      Score: {props.score} | Top Score: {props.topScore}\n     </span>\n     \n     \n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron() {\n  return (\n    <div className=\"jumbotron text-center\">\n      <h1>Kitty-Kat Memory Game!</h1>\n      <h3>Click on the kitties, but don't click on the same one twice!</h3>\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport \"./style.css\"\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={`${size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")} padding`} \n    >\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n","import React from \"react\";\n\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={ `row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n","//this helper file assists with putting images into state directly without having to \r\n//manually import each one and create an array in App.js\r\n\r\nconst images = [\r\n  {id: 1, src: `${process.env.PUBLIC_URL}/assets/cat1.jpg`},\r\n  {id: 2, src: `${process.env.PUBLIC_URL}/assets/cat2.jpg`},\r\n  {id: 3, src: `${process.env.PUBLIC_URL}/assets/cat3.jpg`},\r\n  {id: 4, src: `${process.env.PUBLIC_URL}/assets/cat4.png`},\r\n  {id: 5, src: `${process.env.PUBLIC_URL}/assets/cat5.png`},\r\n  {id: 6, src: `${process.env.PUBLIC_URL}/assets/cat6.jpg`},\r\n  {id: 7, src: `${process.env.PUBLIC_URL}/assets/cat7.jpg`},\r\n  {id: 8, src: `${process.env.PUBLIC_URL}/assets/cat8.jpg`},\r\n  {id: 9, src: `${process.env.PUBLIC_URL}/assets/cat9.jpg`},\r\n  {id: 10, src: `${process.env.PUBLIC_URL}/assets/cat10.jpg`},\r\n  {id: 11, src: `${process.env.PUBLIC_URL}/assets/cat11.png`},\r\n  {id: 12, src: `${process.env.PUBLIC_URL}/assets/cat12.jpg`},\r\n  {id: 13, src: `${process.env.PUBLIC_URL}/assets/cat13.jpg`},\r\n  {id: 14, src: `${process.env.PUBLIC_URL}/assets/cat14.jpg`},\r\n  {id: 15, src: `${process.env.PUBLIC_URL}/assets/cat15.jpg`},\r\n  {id: 16, src: `${process.env.PUBLIC_URL}/assets/cat16.jpg`}\r\n];\r\n\r\nfunction imageLoader(){\r\n  return images;\r\n}\r\n\r\nexport default imageLoader;\r\n\r\n","import React, { Component } from 'react';\nimport Nav from \"./components/Nav\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport { Container, Row, Col } from \"./components/Grid\";\nimport imageLoader from \"./utils/images\";\nimport \"./App.css\"\n\nclass App extends Component {\n\n  state = {\n    images: [],\n    clickedArr: [],\n    score: 0,\n    topScore: 0,\n    message: \"Click an image to begin play.\"\n  }\n\n  componentDidMount = () => {\n    const images = imageLoader();\n    this.setState({ images: images }, this.cb);\n  }\n\n  cb = () => {\n    this.shuffleImages();\n  }\n\n  shuffleImages = () => {\n    const temp = this.state.images;\n    for (let i = temp.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [temp[i], temp[j]] = [temp[j], temp[i]];\n    }\n    this.setState({ images: temp })\n  }\n\n  handleClick = id => {\n    console.log(\"clicked\")\n    //first we check if the latest image id is in the clickedArr\n    if (this.state.clickedArr.includes(id)) {\n      //game over - if new score > top score, update top score. clear clickedArr\n      this.setState({\n        message: \"You guessed incorrectly!\",\n        score: 0,\n        topScore: this.state.topScore > this.state.score ? this.state.topScore : this.state.score,\n        clickedArr: []\n      });\n    } else {\n      //add the id to the clickedArr and update the score\n      this.setState({\n        clickedArr: this.state.clickedArr.concat(id),\n        message: \"You guessed correctly!\",\n        score: this.state.score + 1\n      });\n    }\n    this.shuffleImages();\n  }\n\n  render() {\n    return (\n      <>\n        <Nav score={this.state.score} topScore={this.state.topScore} message={this.state.message} />\n        <Jumbotron />\n        <Container>\n          <Row>\n            {this.state.images.map(cat => {\n              return (\n                <Col size=\"md-3\" key={cat.id}>\n                  <img src={cat.src} alt=\"cat face\" onClick={() => this.handleClick(cat.id)} />\n                </Col>\n              );\n            })}\n          </Row>\n        </Container>\n      </>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}